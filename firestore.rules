rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isParent(childId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(childId)/parents/$(request.auth.uid));
    }

    // User profiles
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if isOwner(userId);

      // Parent-child relationships
      match /parents/{parentId} {
        allow read: if isOwner(userId) || isOwner(parentId);
        // Allow student to manage OR allow parent to create their own entry
        allow write: if isOwner(userId) || isOwner(parentId);
      }

      // Children under parent account
      match /children/{childId} {
        allow read: if isOwner(userId) || isOwner(childId);
        // Allow parent to manage OR allow child to create their own entry
        allow write: if isOwner(userId) || isOwner(childId);
      }
    }

    // Learning progress data
    match /progress/{userId} {
      allow read: if isOwner(userId) || isParent(userId);
      allow write: if isOwner(userId);

      // Granular progress tracking
      match /paths/{pathId} {
        allow read: if isOwner(userId) || isParent(userId);
        allow write: if isOwner(userId);
      }
    }

    // Practice session data
    match /sessions/{sessionId} {
      allow read: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isParent(resource.data.userId));
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Parent/Student invite links
    match /invites/{inviteId} {
      // Authenticated users can create invites
      allow create: if isAuthenticated();
      // Anyone can read invites (needed to accept invite)
      allow read: if true;
      // Creator can update/delete, OR recipient can update to accept
      allow update: if isAuthenticated() &&
        (resource.data.fromUid == request.auth.uid ||
         request.resource.data.acceptedByUid == request.auth.uid);
      allow delete: if isAuthenticated() && resource.data.fromUid == request.auth.uid;
    }

    // Email queue for Firebase Email Extension
    match /mail/{mailId} {
      // Authenticated users can create email documents
      allow create: if isAuthenticated();
      // Allow read/update for the extension service account and document creator
      // Extension needs to update with delivery status
      allow read, update: if isAuthenticated();
      // Nobody can delete
      allow delete: if false;
    }

    // Public curriculum metadata (read-only)
    match /curriculum/{document=**} {
      allow read: if true;
      allow write: if false;
    }

    // Analytics events (write-only)
    match /analytics/{eventId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if false;
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
