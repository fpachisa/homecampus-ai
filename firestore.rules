rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Check if user is parent using profile.parents array
    function isParent(childId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(childId)/profile) &&
        get(/databases/$(database)/documents/users/$(childId)/profile)
          .data.parents.hasAny([request.auth.uid]);
    }

    // Rate limiting helper - prevent rapid writes (1 second minimum)
    function rateLimit() {
      return request.time < resource.data.lastUpdated + duration.value(1, 's');
    }

    // Validate progress update structure
    function validateProgressUpdate() {
      return request.resource.data.keys().hasAll(['lastUpdated', 'messages']) &&
             request.resource.data.messages is list &&
             request.resource.data.messages.size() < 1500; // Prevent abuse
    }

    // User data - new hybrid collection structure
    match /users/{userId} {

      // User profile document
      match /profile {
        allow read: if isOwner(userId) || isParent(userId);
        allow write: if isOwner(userId);
      }

      // Progress summary (denormalized for parent dashboard - single read!)
      match /progressSummary {
        allow read: if isOwner(userId) || isParent(userId);
        allow write: if isOwner(userId) && !rateLimit();
      }

      // Learn mode conversations (subtopic level: users/{uid}/learn/{subtopicId}/conversation)
      match /learn/{subtopicId}/conversation {
        allow read: if isOwner(userId) || isParent(userId);
        allow write: if isOwner(userId) && validateProgressUpdate() && !rateLimit();
      }

      // Practice mode progress (topic level: users/{uid}/practice/{topicId}/progress)
      match /practice/{topicId}/progress {
        allow read: if isOwner(userId) || isParent(userId);
        allow write: if isOwner(userId) && !rateLimit();
      }
    }

    // Parent/Student invite links
    match /invites/{inviteId} {
      // Authenticated users can create invites
      allow create: if isAuthenticated();
      // Anyone can read invites (needed to accept invite)
      allow read: if true;
      // Creator can update/delete, OR recipient can update to accept
      allow update: if isAuthenticated() &&
        (resource.data.fromUid == request.auth.uid ||
         request.resource.data.acceptedByUid == request.auth.uid);
      allow delete: if isAuthenticated() && resource.data.fromUid == request.auth.uid;
    }

    // Email queue for Firebase Email Extension
    match /mail/{mailId} {
      // Authenticated users can create email documents
      allow create: if isAuthenticated();
      // Allow read/update for the extension service account and document creator
      // Extension needs to update with delivery status
      allow read, update: if isAuthenticated();
      // Nobody can delete
      allow delete: if false;
    }

    // Public curriculum metadata (read-only)
    match /curriculum/{document=**} {
      allow read: if true;
      allow write: if false;
    }

    // Analytics events (write-only)
    match /analytics/{eventId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if false;
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
