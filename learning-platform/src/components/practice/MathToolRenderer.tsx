/**
 * Math Tool Renderer
 *
 * Renders visual math tools (diagrams) generated by AI for practice problems.
 * Uses centralized math tools registry as single source of truth.
 */

import React from 'react';
import { toolExists } from '../math-tools/mathToolsRegistry';

// Import all visualizers
import RightTriangleVisualizer from '../math-tools/RightTriangleVisualizer';
import ElevationDepressionVisualizer from '../math-tools/ElevationDepressionVisualizer';
import MultipleDepressionAnglesVisualizer from '../math-tools/MultipleDepressionAnglesVisualizer';
import GeneralTriangleVisualizer from '../math-tools/GeneralTriangleVisualizer';
import ExtendedLineTriangleVisualizer from '../math-tools/ExtendedLineTriangleVisualizer';
import CuboidVisualizer from '../math-tools/CuboidVisualizer';
import PyramidVisualizer from '../math-tools/PyramidVisualizer';
import BearingsVisualizer from '../math-tools/BearingsVisualizer';
import QuadrilateralVisualizer from '../math-tools/QuadrilateralCompositeVisualizer';
import CircleBasicVisualizer from '../math-tools/CircleBasicVisualizer';
import CircleChordVisualizer from '../math-tools/CircleChordVisualizer';
import CircleAngleVisualizer from '../math-tools/CircleAngleVisualizer';
import CircleTangentVisualizer from '../math-tools/CircleTangentVisualizer';
import ParabolaGraphVisualizer from '../math-tools/ParabolaGraphVisualizer';
import FactoringVisualizer from '../math-tools/FactoringVisualizer';
import CompletingSquareVisualizer from '../math-tools/CompletingSquareVisualizer';
import QuadraticFormulaVisualizer from '../math-tools/QuadraticFormulaVisualizer';
import VertexFormTransformVisualizer from '../math-tools/VertexFormTransformVisualizer';
import RootsVisualizer from '../math-tools/RootsVisualizer';
import WordProblemDiagramVisualizer from '../math-tools/WordProblemDiagramVisualizer';

interface MathToolRendererProps {
  toolName: string;
  parameters: Record<string, any>;
  caption?: string;
}

// Component map - maps registry tool names to actual React components
// This is the ONLY place where component mapping happens
const COMPONENT_MAP: Record<string, React.ComponentType<any>> = {
  // Trigonometry tools
  rightTriangle: RightTriangleVisualizer,
  elevationDepression: ElevationDepressionVisualizer,
  multipleDepressionAngles: MultipleDepressionAnglesVisualizer,
  generalTriangle: GeneralTriangleVisualizer,
  extendedLineTriangle: ExtendedLineTriangleVisualizer,
  quadrilateral: QuadrilateralVisualizer,

  // 3D Geometry tools
  cuboid: CuboidVisualizer,
  pyramid: PyramidVisualizer,
  bearings: BearingsVisualizer,

  // Circle geometry tools
  circleBasic: CircleBasicVisualizer,
  circleWithArcs: CircleBasicVisualizer,
  circleWithChords: CircleChordVisualizer,
  circleSemicircle: CircleAngleVisualizer,
  circleTangent: CircleTangentVisualizer,
  circleTwoTangents: CircleTangentVisualizer,
  circleAngleCentre: CircleAngleVisualizer,
  circleSameArc: CircleAngleVisualizer,

  // Quadratic equations tools
  parabolaGraph: ParabolaGraphVisualizer,
  factoringVisualizer: FactoringVisualizer,
  completingSquareVisualizer: CompletingSquareVisualizer,
  quadraticFormulaVisualizer: QuadraticFormulaVisualizer,
  vertexFormTransform: VertexFormTransformVisualizer,
  rootsVisualizer: RootsVisualizer,
  wordProblemDiagram: WordProblemDiagramVisualizer,
};

export const MathToolRenderer: React.FC<MathToolRendererProps> = ({
  toolName,
  parameters,
  caption
}) => {
  // Normalize tool name (handle kebab-case variants)
  const normalizedToolName = toolName.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());

  // Validate tool exists in registry
  if (!toolExists(normalizedToolName)) {
    console.warn(`Unknown tool name: ${toolName} (normalized: ${normalizedToolName})`);
    return (
      <div className="p-4 bg-yellow-50 border border-yellow-300 rounded text-yellow-800">
        Unknown visualization: {toolName}
      </div>
    );
  }

  // Get component from map
  const Component = COMPONENT_MAP[normalizedToolName];

  if (!Component) {
    console.error(`Tool "${normalizedToolName}" exists in registry but not in component map. Please add to COMPONENT_MAP.`);
    return (
      <div className="p-4 bg-red-50 border border-red-300 rounded text-red-800">
        Configuration error: {toolName}
      </div>
    );
  }

  // Render the appropriate visualizer
  const renderTool = () => {
    return <Component {...parameters} caption={caption} />;
  };

  return (
    <div className="my-4 p-4 bg-white rounded-lg border-2 border-gray-200">
      {/* Render the visualization */}
      <div className="flex justify-center">
        {renderTool()}
      </div>
    </div>
  );
};
