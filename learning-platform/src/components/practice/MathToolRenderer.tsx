/**
 * Math Tool Renderer
 *
 * Renders visual math tools (diagrams) generated by AI for practice problems.
 * Uses centralized math tools registry as single source of truth.
 */

import React from 'react';
import { toolExists } from '../math-tools/mathToolsRegistry';

// Import all visualizers
import RightTriangleVisualizer from '../math-tools/RightTriangleVisualizer';
import ElevationDepressionVisualizer from '../math-tools/ElevationDepressionVisualizer';
import MultipleDepressionAnglesVisualizer from '../math-tools/MultipleDepressionAnglesVisualizer';
import GeneralTriangleVisualizer from '../math-tools/GeneralTriangleVisualizer';
import ExtendedLineTriangleVisualizer from '../math-tools/ExtendedLineTriangleVisualizer';
import CuboidVisualizer from '../math-tools/CuboidVisualizer';
import PyramidVisualizer from '../math-tools/PyramidVisualizer';
import BearingsVisualizer from '../math-tools/BearingsVisualizer';
import QuadrilateralVisualizer from '../math-tools/QuadrilateralCompositeVisualizer';
import CircleBasicVisualizer from '../math-tools/CircleBasicVisualizer';
import CircleChordVisualizer from '../math-tools/CircleChordVisualizer';
import CircleAngleVisualizer from '../math-tools/CircleAngleVisualizer';
import CircleTangentVisualizer from '../math-tools/CircleTangentVisualizer';
import ParabolaGraphVisualizer from '../math-tools/ParabolaGraphVisualizer';
import FactoringVisualizer from '../math-tools/FactoringVisualizer';
import CompletingSquareVisualizer from '../math-tools/CompletingSquareVisualizer';
import QuadraticFormulaVisualizer from '../math-tools/QuadraticFormulaVisualizer';
import VertexFormTransformVisualizer from '../math-tools/VertexFormTransformVisualizer';
import RootsVisualizer from '../math-tools/RootsVisualizer';
import WordProblemDiagramVisualizer from '../math-tools/WordProblemDiagramVisualizer';
import ExponentialGraphVisualizer from '../math-tools/ExponentialGraphVisualizer';
import LogarithmGraphVisualizer from '../math-tools/LogarithmGraphVisualizer';
import GraphCompareVisualizer from '../math-tools/GraphCompareVisualizer';
import VennDiagram1SetVisualizer from '../math-tools/VennDiagram1SetVisualizer';
import VennDiagram2SetVisualizer from '../math-tools/VennDiagram2SetVisualizer';
import VennDiagram3SetVisualizer from '../math-tools/VennDiagram3SetVisualizer';
import SetVisualizer from '../math-tools/SetVisualizer';
import NumberLineVisualizer from '../math-tools/NumberLineVisualizer';
import BarChartVisualizer from '../math-tools/BarChartVisualizer';
import HistogramVisualizer from '../math-tools/HistogramVisualizer';
import BoxPlotVisualizer from '../math-tools/BoxPlotVisualizer';
import ScatterPlotVisualizer from '../math-tools/ScatterPlotVisualizer';
import CartesianPlaneVisualizer from '../math-tools/CartesianPlaneVisualizer';
import Coordinate3DPlaneVisualizer from '../math-tools/Coordinate3DPlaneVisualizer';

// Calculus visualizers
import FunctionGraphVisualizer from '../math-tools/FunctionGraphVisualizer';
import LimitVisualizerComponent from '../math-tools/LimitVisualizerComponent';
import TangentVisualizerComponent from '../math-tools/TangentVisualizerComponent';
import SecantTangentComparisonVisualizer from '../math-tools/SecantTangentComparisonVisualizer';
import DerivativeGrapherVisualizer from '../math-tools/DerivativeGrapherVisualizer';
import FirstPrinciplesVisualizer from '../math-tools/FirstPrinciplesVisualizer';
import ChainRuleVisualizer from '../math-tools/ChainRuleVisualizer';
import NormalLineGrapherVisualizer from '../math-tools/NormalLineGrapherVisualizer';
import StationaryPointsVisualizer from '../math-tools/StationaryPointsVisualizer';
import OptimizationGrapherVisualizer from '../math-tools/OptimizationGrapherVisualizer';
import AreaApproximationVisualizer from '../math-tools/AreaApproximationVisualizer';
import DefiniteIntegralVisualizer from '../math-tools/DefiniteIntegralVisualizer';
import RiemannSumVisualizer from '../math-tools/RiemannSumVisualizer';

interface MathToolRendererProps {
  toolName: string | null | undefined;
  parameters: Record<string, any>;
}

// Component map - maps registry tool names to actual React components
// This is the ONLY place where component mapping happens
const COMPONENT_MAP: Record<string, React.ComponentType<any>> = {
  // Trigonometry tools
  rightTriangle: RightTriangleVisualizer,
  elevationDepression: ElevationDepressionVisualizer,
  multipleDepressionAngles: MultipleDepressionAnglesVisualizer,
  generalTriangle: GeneralTriangleVisualizer,
  extendedLineTriangle: ExtendedLineTriangleVisualizer,
  quadrilateral: QuadrilateralVisualizer,

  // 3D Geometry tools
  cuboid: CuboidVisualizer,
  pyramid: PyramidVisualizer,
  bearings: BearingsVisualizer,

  // Circle geometry tools
  circleBasic: CircleBasicVisualizer,
  circleWithArcs: CircleBasicVisualizer,
  circleWithChords: CircleChordVisualizer,
  circleSemicircle: CircleAngleVisualizer,
  circleTangent: CircleTangentVisualizer,
  circleTwoTangents: CircleTangentVisualizer,
  circleAngleCentre: CircleAngleVisualizer,
  circleSameArc: CircleAngleVisualizer,

  // Quadratic equations tools
  parabolaGraph: ParabolaGraphVisualizer,
  factoringVisualizer: FactoringVisualizer,
  completingSquareVisualizer: CompletingSquareVisualizer,
  quadraticFormulaVisualizer: QuadraticFormulaVisualizer,
  vertexFormTransform: VertexFormTransformVisualizer,
  rootsVisualizer: RootsVisualizer,
  wordProblemDiagram: WordProblemDiagramVisualizer,

  // Exponential and logarithm tools
  exponentialGraph: ExponentialGraphVisualizer,
  logarithmGraph: LogarithmGraphVisualizer,
  graphCompare: GraphCompareVisualizer,

  // Sets and Venn diagrams tools
  vennDiagram1Set: VennDiagram1SetVisualizer,
  vennDiagram: VennDiagram2SetVisualizer,
  vennDiagram3: VennDiagram3SetVisualizer,
  setVisualizer: SetVisualizer,
  numberLine: NumberLineVisualizer,

  // Statistics tools
  barChart: BarChartVisualizer,
  histogram: HistogramVisualizer,
  boxPlot: BoxPlotVisualizer,
  scatterPlot: ScatterPlotVisualizer,

  // Probability tools
  // NOT ADDED FOR A REASON....CHECK BEFORE ADDING

  // Coordinate geometry tools
  cartesianPlane: CartesianPlaneVisualizer,
  coordinate3DPlane: Coordinate3DPlaneVisualizer,

  // Calculus tools - Differential Calculus
  functionGraph: FunctionGraphVisualizer,
  limitVisualizer: LimitVisualizerComponent,
  tangentVisualizer: TangentVisualizerComponent,
  secantTangentComparison: SecantTangentComparisonVisualizer,
  derivativeGrapher: DerivativeGrapherVisualizer,
  firstPrinciplesVisualizer: FirstPrinciplesVisualizer,
  chainRuleVisualizer: ChainRuleVisualizer,
  normalLineGrapher: NormalLineGrapherVisualizer,
  stationaryPointsVisualizer: StationaryPointsVisualizer,
  optimizationGrapher: OptimizationGrapherVisualizer,

  // Calculus tools - Integration
  areaApproximation: AreaApproximationVisualizer,
  definiteIntegralVisualizer: DefiniteIntegralVisualizer,
  riemannSumVisualizer: RiemannSumVisualizer,
};

export const MathToolRenderer: React.FC<MathToolRendererProps> = ({
  toolName,
  parameters
}) => {
  // Defensive check: Handle null/undefined toolName
  // When mathTool is intentionally omitted (null), just don't render anything
  if (!toolName || typeof toolName !== 'string') {
    // Return null silently - this is intentional for questions that don't need visualization
    return null;
  }

  // Normalize tool name (handle kebab-case variants)
  const normalizedToolName = toolName.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());

  // Validate tool exists in registry
  if (!toolExists(normalizedToolName)) {
    console.warn(`MathToolRenderer: Unknown tool name: ${toolName} (normalized: ${normalizedToolName}). Silently ignoring.`);
    // Return null silently - invalid toolName, don't show error to user
    return null;
  }

  // Get component from map
  const Component = COMPONENT_MAP[normalizedToolName];

  if (!Component) {
    console.error(`MathToolRenderer: Tool "${normalizedToolName}" exists in registry but not in component map. Please add to COMPONENT_MAP. Silently ignoring.`);
    // Return null silently - configuration error, don't show error to user
    return null;
  }

  // Render the appropriate visualizer
  const renderTool = () => {
    return <Component {...parameters} />;
  };

  return (
    <div className="my-4 p-4 bg-white rounded-lg border-2 border-gray-200">
      {/* Render the visualization */}
      <div className="flex flex-col items-center">
        {renderTool()}
      </div>
    </div>
  );
};
